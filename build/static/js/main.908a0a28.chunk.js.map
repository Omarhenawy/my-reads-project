{"version":3,"sources":["BooksAPI.js","SearchBackButton.js","SearchInput.js","SearchBar.js","BookShelfChanger.js","Book.js","SearchResults.js","SearchPage.js","BookShelf.js","AddBookButton.js","BookList.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","SearchBackButton","to","className","SearchInput","books","search","searchBooks","useState","searchTerm","setSearchTerm","type","placeholder","onChange","e","target","value","SearchBar","onMove","BookShelfChanger","shelf","book","currentShelf","setShelf","disabled","Book","style","width","height","backgroundImage","imageLinks","thumbnail","title","authors","join","SearchResults","searchedBooks","map","onShelf","id","SearchPage","BookShelf","bookOnshelf","filter","key","name","AddBookButton","BookList","bookshelves","BooksApp","Allbooks","setBooks","setsearchedBooks","useEffect","fetch","then","res","json","data","debounce","query","length","method","body","JSON","stringify","BooksAPI","error","updateBook","newBooklistBooks","updatedbook","concat","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.908a0a28.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import { BrowserRouter as Router, Link } from \"react-router-dom\";\r\n\r\nconst SearchBackButton = () => {\r\n  return (\r\n    <Link to=\"/\">\r\n      <button className=\"close-search\">Close</button>\r\n    </Link>\r\n  );\r\n};\r\nexport default SearchBackButton;\r\n","import React, { useState } from \"react\";\r\nconst SearchInput = ({ books, search, searchBooks }) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"search-books-input-wrapper\">\r\n      {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search by title or author\"\r\n        onChange={(e) => {\r\n          setSearchTerm(e.target.value);\r\n          search(searchTerm);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchInput;\r\n","import SearchBackButton from \"./SearchBackButton\";\r\nimport SearchInput from \"./SearchInput\";\r\nconst SearchBar = ({ books, onMove, search }) => {\r\n  return (\r\n    <div className=\"search-books-bar\">\r\n      <SearchBackButton />\r\n      <SearchInput books={books} onMove={{ books, onMove }} search={search} />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBar;\r\n","import React, { useState } from \"react\";\r\n\r\nconst BookShelfChanger = ({ shelf, book, onMove }) => {\r\n  const [currentShelf, setShelf] = useState(shelf);\r\n\r\n  const HandleChange = (e) => {\r\n    setShelf(e.target.value);\r\n    onMove(book, e.target.value);\r\n  };\r\n  return (\r\n    <div className=\"book-shelf-changer\">\r\n      <select value={currentShelf} onChange={HandleChange}>\r\n        <option value=\"move\" disabled>\r\n          Move to...\r\n        </option>\r\n        <option value=\"currentlyReading\">Currently Reading</option>\r\n        <option value=\"wantToRead\">Want to Read</option>\r\n        <option value=\"read\">Read</option>\r\n        <option value=\"none\">None</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookShelfChanger;\r\n","import BookShelfChanger from \"./BookShelfChanger\";\r\nconst Book = ({ book, shelf, onMove }) => {\r\n  return (\r\n    <li>\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 192,\r\n              backgroundImage: `url(${\r\n                book.imageLinks && book.imageLinks.thumbnail\r\n              })`,\r\n            }}\r\n          />\r\n          <BookShelfChanger shelf={shelf} book={book} onMove={onMove} />\r\n        </div>\r\n        <div className=\"book-title\">{book.title}</div>\r\n        <div className=\"book-authors\">\r\n          {book.authors && book.authors.join(\", \")}\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\nexport default Book;\r\n","import Book from \"./Book\";\r\nconst SearchResults = ({ searchedBooks, onMove, books }) => {\r\n  searchedBooks.map((book) => {\r\n    books.map((onShelf) => {\r\n      if (onShelf.id === book.id) {\r\n        book.shelf = onShelf.shelf;\r\n      }\r\n      return onShelf;\r\n    });\r\n    return book;\r\n  });\r\n\r\n  return (\r\n    <div className=\"search-books-results\">\r\n      <ol className=\"books-grid\">\r\n        {searchedBooks.map((book) => {\r\n          return (\r\n            <Book\r\n              key={book.id}\r\n              book={book}\r\n              shelf={book.shelf ? book.shelf : \"none\"}\r\n              onMove={onMove}\r\n            />\r\n          );\r\n        })}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import SearchBar from \"./SearchBar\";\r\nimport SearchResults from \"./SearchResults\";\r\nconst SearchPage = ({ books, onMove, search, searchedBooks }) => {\r\n  return (\r\n    <div className=\"search-books\">\r\n      <SearchBar books={books} search={search} />\r\n      <SearchResults\r\n        books={books}\r\n        onMove={onMove}\r\n        searchedBooks={searchedBooks}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchPage;\r\n","import Book from \"./Book\";\r\nconst BookShelf = ({ shelf, books, onMove }) => {\r\n  const bookOnshelf = books.filter((book) => book.shelf === shelf.key);\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">{shelf.name}</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {bookOnshelf.map((book) => {\r\n            return (\r\n              <Book\r\n                key={book.id}\r\n                book={book}\r\n                shelf={shelf.key}\r\n                onMove={onMove}\r\n              />\r\n            );\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default BookShelf;\r\n","import { BrowserRouter as Router, Link } from \"react-router-dom\";\r\n\r\nconst AddBookButton = () => {\r\n  return (\r\n    <div className=\"open-search\">\r\n      <Link to=\"search\">\r\n        <button>Add a book</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\nexport default AddBookButton;\r\n","import BookShelf from \"./BookShelf\";\r\nimport AddBookButton from \"./AddBookButton\";\r\nconst BookList = ({ bookshelves, books, onMove }) => {\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          {bookshelves.map((shelf) => {\r\n            return (\r\n              <BookShelf\r\n                key={shelf.key}\r\n                shelf={shelf}\r\n                books={books}\r\n                onMove={onMove}\r\n              />\r\n            );\r\n          })}\r\n          ;\r\n        </div>\r\n      </div>\r\n      <AddBookButton />\r\n    </div>\r\n  );\r\n};\r\nexport default BookList;\r\n","import React, { useEffect, useState } from \"react\";\n// import * as BooksAPI from './BooksAPI'\nimport \"./App.css\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { BrowserRouter as Link, Route } from \"react-router-dom\";\nimport { debounce } from \"throttle-debounce\";\n\nimport SearchPage from \"./SearchPage\";\nimport BookList from \"./BookList\";\n\nconst BooksApp = () => {\n  const bookshelves = [\n    { key: \"currentlyReading\", name: \"Currently Reading\" },\n    { key: \"wantToRead\", name: \"Want to Read\" },\n    { key: \"read\", name: \"Have Read\" },\n  ];\n  /* cSpell:disable */\n  const [Allbooks, setBooks] = useState([]);\n  const [searchedBooks, setsearchedBooks] = useState([]);\n\n  useEffect(() => {\n    BooksAPI.getAll().then((books) => {\n      setBooks(books);\n    });\n  }, []);\n  const searchBooks = debounce(200, false, (query) => {\n    if (query.length > 0) {\n      BooksAPI.search(query).then((books) => {\n        if (books.error) {\n          setsearchedBooks([]);\n        } else {\n          setsearchedBooks(books);\n        }\n      });\n    } else {\n      setsearchedBooks([]);\n    }\n  });\n\n  const updateBook = (book, shelf) => {\n    BooksAPI.update(book, shelf);\n    let newBooklistBooks = Allbooks.filter(\n      (updatedbook) => updatedbook.id !== book.id\n    );\n    if (shelf !== \"none\") {\n      book.shelf = shelf;\n\n      newBooklistBooks = newBooklistBooks.concat(book);\n    }\n    setBooks(newBooklistBooks);\n  };\n\n  return (\n    <div className=\"app\">\n      <Route path=\"/search\">\n        <SearchPage\n          searchedBooks={searchedBooks}\n          onMove={updateBook}\n          search={searchBooks}\n          books={Allbooks}\n        />\n      </Route>\n      <Route exact path=\"/\">\n        <BookList\n          bookshelves={bookshelves}\n          books={Allbooks}\n          onMove={updateBook}\n        />\n      </Route>\n    </div>\n  );\n};\n\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}